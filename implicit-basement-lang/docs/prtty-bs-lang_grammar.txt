--------------------------------------------------------------------------------
    Prototype Basement Language (a.k.a. PRTTY-BS Language) Grammar
        Version: 0.4.3
--------------------------------------------------------------------------------
program     := { decl | func | struct | comment }, EOF ;

decl        := var_decl | func_decl ;
var_decl    := [ var_attrib ], type, id, [ var_init ],
               { ",", id, [ var_init ] }, end_of_line ;
var_attrib  := "const" ;
var_init    := assign_op, literal ;
func_decl   := type, id, "(", [ param_list ], ")",
               { ",", id, "(", [ param_list ], ")" }, end_of_line ;

struct      := "struct", id, scope_start, struct_mem, { struct_mem }, scope_end,
               [ "struct" ], [ id ] ;
struct_mem  := type, id, { ",", id }, end_of_line ;

type        := ( int_type | float_type | ( "struct", id ) | "void" ), 
               [ "[", integer, "]" ], { "*" } ;
int_type    := "u8"
             | "u16"
             | "u32"
             | "u64"
             | "i8"
             | "i16"
             | "i32"
             | "i64"
             | "usize" ;
float_type  := "f32" | "f64" ;

func        := "function", id, "(", [ param_list ], ")", [ "=>", type ],
               cmpd_stmt, [ "function" ], [ id ] ;
param_list  := param, { param } ;
param       := type, id, [ "[", integer, "]" ] ;

cmpd_stmt   := scope_start, { stmt }, scope_end ;
stmt        := if_stmt
             | loop_stmt
             | loop_ctrl
             | scope_block
             | var_decl
             | ( expr, end_of_line )
             | ( "return", expr, end_of_line )
             | end_of_line
             | comment ;
loop_ctrl   := ( "break" | "continue" ), end_of_line ;
if_stmt     := "if", "(", expr, ")", scope_start, { stmt },
               { "else", [ "if", "(", expr, ")" ], scope_start, { stmt } },
               scope_end, [ "if" ] ;
loop_stmt   := "loop", cmpd_stmt, [ "loop" ];
scope_block := "block", cmpd_stmt, [ "block" ] ;

expr        := term, [ term_op, term ] ;
term        := { l_un_op }, factor, [ factor_op, factor ], { r_un_op } ;
factor      := literal | var_invoke | func_call | (  "(" , expr, ")"  ) ;

term_op     := assign_op | t_arith_op | t_bit_op | rel_op ;
factor_op   := f_arith_op | f_bit_op ;

func_call   := id, "(", [ expr, { ",", expr } ], ")" ;
var_invoke  := id, [ "[", expr, "]" ], [ ".", var_invoke ] ;

literal     := integer | float | char | string | arr_init | struct_init ;
arr_init    := "[", [ expr, { ",", expr } ], "]" ;
struct_init := "{", [ expr, { ",", expr } ], "}" ;

l_un_op     := "+"
             | "-"
             | "~"
             | "!"
             | "*"
             | "&"
             | "++"
             | "--"
             | ( "(", type, ")" );
r_un_op     := "++" | "--" ;
assign_op   := "=" ;
t_arith_op  := "+" | "-" ;
f_arith_op  := "*" | "/" | "%" ;
t_bit_op    := "|" | "^" | "<<" | ">>" ;
f_bit_op    := "&" ;

scope_start :=  ":"  | "{" ;
scope_end   := "end" | "}" ;
end_of_line := EOL, [ comment ] ;
comment     := comment_sgn, { ascii_char }, "\n" ;
comment_sgn := "#"
EOL         := ";" ;
EOF         := "\0" ;

integer     := digit_seq, [ int_type ] ;
float       := digit_seq, ".", [ digit_seq ], [ float_type ] ;
char        := "'", ascii_char, "'" ;
string      := '"', { ascii_char }, '"' ;
id          := letter, { letter | digit | "_" } ;
digit_seq   := digit, [ digit ] ;
letter      := a | b ... | y | z | A | B ... | Y | Z ;
digit       := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 ;
ascii_char  := (? ASCII characters ?) ;

--------------------------------------------------------------------------------
    Operator Precedence

o------------------------------------------------------------------------------o
| Operator | Description                                       | Associativity |
|----------|---------------------------------------------------|---------------|
|   [ ]    | Array subscript                                   | left to right |
|    .     | Struct member selection                           |               |
|  ++ --   | Postfix increment/decrement                       |               |
|----------|---------------------------------------------------|---------------|
|  ++ --   | Prefix increment/decrement                        |               |
|   + -    | Unary plus/minus                                  |               |
|   ! ~    | Logical negation/bitwise NOT                      | right to left |
| ( type ) | Type characters                                   |               |
|    *     | Pointer dereference                               |               |
|    &     | Address of operand                                |               |
|----------|---------------------------------------------------|---------------|
|  * / %   | Multiplication, division, modulo operation        | left to right |
|----------|---------------------------------------------------|---------------|
|   + -    | Addition, subtraction                             | left to right |
|----------|---------------------------------------------------|---------------|
|  <<  >>  | Bitwise shift left & right                        | left to right |
|----------|---------------------------------------------------|---------------|
|   < <=   | Less than, less than or equal to                  | left to right |
|   > >=   | Greater than, greater than or equal to            |               |
|----------|---------------------------------------------------|---------------|
|  == !=   | Equal to, not equal to                            | left to right |
|----------|---------------------------------------------------|---------------|
|    &     | Bitwise AND                                       | left to right |
|----------|---------------------------------------------------|---------------|
|    ^     | Bitwise XOR                                       | left to right |
|----------|---------------------------------------------------|---------------|
|    |     | Bitwise OR                                        | left to right |
|----------|---------------------------------------------------|---------------|
|    =     | Assignment operation                              | right to left |
o------------------------------------------------------------------------------o

NOTE: This is based on the C language operator precedence.
