--------------------------------------------------------------------------------
Instruction Set of the Virtual Machine of `basement-lang`
    [VERSION 0.8.1 (pre-alpha)]
--------------------------------------------------------------------------------
PRELIMINARIES
-------------

Virtual Machine states
    The state of the virtual machine can be the following:
    - SUCCESS       (value: 0)
    - FAILURE       (value: 1)
    - RUNNING       (value: 2)
    - UNINITIALIZED (value: 3)
    Upon halting, these states are usually accompanied by a message string which
    can be printed onto either STDOUT or STDERR.


Word data
    In this virtual machine, a "word" has the size of 64 bits or 8 bytes.
    From hereon, the size of a word in bytes shall be referred to as `W`.
    The sizes are also in *bits* unless stated otherwise.
    For instance, frame pointer offsets are in bytes, not bits.


Floating point numbers and arithmetic
    All forms of data are integers under the hood. And all operations so far,
    i.e. pre-0.8 instructions, assume that all forms of data are integers.
    While this is still true in this current version, generally speaking,
    great care must be exercised when dealing with floating point arithmetic
    since they are more complex than integers.

    In this version, floating point arithmetic is implemented with two
    precisions:
        1. Single precision or 32-bit float.
        2. Double precision or 64-bit float.

    We use the more descriptive "32-bit float" and "64-bit float" terms which
    maybe shortened to F32 and F64, respectively. Likewise, the term "floating
    point number" may also just be called as "float".

    There will be separate arithmetic operations for floating point numbers, and
    a set of instructions for casting between integer and floats.

    Do note that floats are still subjected to the same rule for data alignment,
    i.e. whether a float be of size 32 or 64, it is automatically
    expanded to size `W` padded with zeros if need be both in the operand stack.


Data sizes
    There shall be multiple bit sizes for data. These are 8, 16, 32 and 64,
    64 being the word size. They shall be generically referred to as `N` from
    hereon.


Stacks
    There shall be two stacks: the operand stack and call stack:
        1. The operand stack, which shall hereon be referred to as just the
           "stack", contains `W` sized elements that are operands to an
           operation or results of an operation.
        2. The call stack contains elements called call frames which contains
           information about a function call. Call frames are further discussed
           below.

    These stacks are accessed by two pointers:
        1. Stack pointer.
        2. Frame pointer.


Call frame
    When calling a function, several important pieces of information are to be
    stored to a block of data called a "call frame" which is pushed to the
    call stack upon calling the function.

    The call frame has the following structure:

        ... |    A    | B |    C    | D | E |TOS|
                                              ^
                                              |
                                              Frame pointer

        FIGURE 1: Top section of the stack with a call frame.

    Labels:
        A.   Function arguments, each of which are of size `W`.
        B.   Size of the argument section in bytes.
             The size of this data is `W`.
        C.   Local variable section. The sizes of the local variables
             are determined during compilation. This also implies that
             the size of the target data of the LOAD and STORE
             instructions are also determiend during compilation.
        D.   Size of the local variable section in bytes.
             The size of this data is `W`.
        E.   Return address as a `W` sized integer.
        TOS. The top of the stack.


Function table
    The generated code from the source code shall include a so called function
    table which is a block of data containing information about the functions
    in the program. The elements in the table contain the following information:
        1. The number of function arguments.
        2. The size of the local variable section in *bytes*.
        3. The address to the function code.
    These pieces of data are of size `W`.


Immediate arguments for instructions
    - <LITERAL>
        A constant value of size `W` supplied by the user in the code.
    - <ADDRESS>
        Memory address of size `W`.


Syntax
    For now, we let the instructions to be CASE-INSENSITIVE.

--------------------------------------------------------------------------------
INSTRUCTIONS
------------

Stack manipulation instructions
    PUSH & POP instructions:
        - LOAD*N*_CONST, <LITERAL>
            Push the immediate argument of size `N` to the stack.
            The size of the pushed values is extended to `W` padding them
            with zeroes.
            The actual instructions are to be so:
                - LOAD8_CONST
                - LOAD16_CONST
                - LOAD32_CONST
                - LOAD64_CONST
        - LOAD*N*_ADDR, <ADDRESS>
            Push a value of size `N` bit to stack addressed by the immediate
            argument.
            The size of the pushed values is extended to `W` padding them
            with zeroes.
            The actual instructions are to be so:
                - LOAD8_ADDR
                - LOAD16_ADDR
                - LOAD32_ADDR
                - LOAD64_ADDR
        - STORE*N*_ADDR, <ADDRESS>
            Pop the `W` sized top element of the stack with size `N` and store
            it to memory addressed by the immediate argument.
            The value to be stored shall be bit-masked cutting off the higher
            significant bits to fit the `N` sized call frame element.
            The actual instructions are to be so:
                - STORE8_ADDR
                - STORE16_ADDR
                - STORE32_ADDR
                - STORE64_ADDR
        - LOAD*N*
            Pop a `W` sized address from the stack and push the `N` sized value
            the address points to to the stack.
            The size of the pushed values is extended to `W` padding them
            with zeroes.
            The actual instructions are to be so:
                - LOAD8
                - LOAD16
                - LOAD32
                - LOAD64
        - STORE*N*
            Pop a `W` sized address and a `W` sized value, and write the value
            to the popped address.
            The value to be stored shall be bit-masked cutting off the higher
            significant bits to fit the `N` sized call frame element.
            The actual instructions are to be so:
                - STORE8
                - STORE16
                - STORE32
                - STORE64
        - LOAD*N*_OFF_FP, <LITERAL>
            Push a value of size `N` to the stack from a call frame element a
            number of bytes away the frame pointer whose offset value is
            supplied by the `W` size immediate argument. This is used to access
            the arguments and local variables of a function.
            The size of the pushed values is extended to `W` padding them
            with zeroes.
            The actual instructions are to be so:
                - LOAD8_OFF_FP
                - LOAD16_OFF_FP
                - LOAD32_OFF_FP
                - LOAD64_OFF_FP
        - STORE*N*_OFF_FP, <LITERAL>
            Store the `W` sized top element of the stack to a stack element
            a number of bytes away from the frame pointer, the offset value of
            which is to be provided by a `W` sized immediate argument.
            The value to be stored shall be bit-masked cutting off the higher
            significant bits to fit the `N` sized call frame element.
            The actual instructions are to be so:
                - STORE8_OFF_FP
                - STORE16_OFF_FP
                - STORE32_OFF_FP
                - STORE64_OFF_FP
    Miscellaneous:
        - LOAD_IP
            Push the instruction pointer as a `W` sized integer to the stack.
        - LOAD_SP
            Push the stack pointer as a `W` sized integer to the stack.
        - LOAD_FP
            Push the frame pointer as a `W` sized integer to the stack.
        - POP_RES
            Pop the `W` sized top element of the stack and set it as the
            VM result.
        - DISCARD
            Remove the `W` sized top element of the stack.
        - DUP
            Duplicate the `W` sized top element of the stack.
        - SWAP_TOP
            Swap the two topmost elements both of size `W` on the stack.
        - SWAP, <LITERAL>
            Swap the `W` sized top element of the stack with another `W` sized
            element in the stack with the `W` sized immediate argument as the
            offset from the top.
            NOTE: Since the stack grows downwards, the offset value is positive.


Arithmetic logical operation instructions
    Binary integer operations:
        Pop two `W` sized values from the stack, perform the binary operation,
        and push the result which is also of size `W` to the stack.
        - ADD  (addition)
        - SUB  (subtraction)
        - MUL  (multiplication)
        - DIV  (integer division)
    Binary floating point operations:
        Same operation as with binary integer operations.
        - ADD_F32
        - ADD_F64
        - SUB_F32
        - SUB_F64
        - MUL_F32
        - MUL_F64
        - DIV_F32
        - DIV_F64
    In-place binary integer operations:
        - ADD_CONST, <LITERAL>
            Add the `W` sized immediate argument with the `W` sized top element
            of the stack.
    Unary integer/floating point operations
        Pop one `W` sized value from the stack and do the unary operation on it.
        The result is then pushed to the stack.
        - UN_POSITIVE
            Does not do anything to the number. But it requires that it must
            have at least one element on the stack to act as its operand.
            Same operation applies to the floating point numbers.
        - UN_NEGATIVE
            "Negate" the value on top of the stack. This is equivalent to the
            following bitwise operation:    
                `~n + 1`
            where `~` is the bitwise NOT operation and `n` is the operand to be
            negated.
            Same operation applies to the floating point numbers.
    Type casting between integer and floating point numbers:
        Pop a `W` sized element off the stack which represents either
        a float (either 32 or 64 bits) or a `W` sized integer, and cast it to
        its target data type.
        - INT_TO_F32
        - INT_TO_F64
        - F32_TO_INT
        - F64_TO_INT


Bitwise logical operation instructions
    Binary operations:
        (Same case as the arithmetic binary operations)
        - OR   (bitwise inclusive OR)
        - AND  (bitwise AND)
        - NOR  (bitwise not OR)
        - NAND (bitwise not AND)
        - XOR  (bitwise exclusive OR)
        - LSH  (bitwise left-shift)
        - RSH  (bitwise right-shift)
    Unary operations:
        Pop one value from the stack and do the unary operation on it.
        The result is to be pushed to the stack.
        - NOT  (bitwise NOT)


Comparison operation instructions:
    Binary operations:
        (Same case as the arithmetic/bitwise logical binary operations)
        If the result is true, the pushed value is 1, and if it is false,
        the pushed value is 0.
        - EQ  (Equal)
        - LT  (Less than)
        - LEQ (Less than or equal to)
        - GT  (Greater than)
        - GEQ (Greater than or equal to)


Input/Output instructions:
    IN:
        Get a `W` sized value from the STDIN and push it to the stack.
    OUT_CHAR:
        Pop a `W` sized value from the stack and print it to STDOUT as an ASCII
        character.
    OUT_NUM:
        Pop a `W` sized value from the stack and print it to STDOUT as a
        hexadecimal integer.
    OUT_F32:
        Pop a `W` sized value cast as 32 bit float from the stack and print it
        to STDOUT as a decimal number.
    OUT_F64:
        Pop a `W` sized value cast as 64 bit float from the stack and print it
        to STDOUT as a decimal number.


Jump instructions:
    - JUMP_ADDR, <ADDRESS>
        Unconditional jump to the `W` sized address supplied by the immediate
        argument.
    - JMPZ_ADDR, <ADDRESS>
        Pop the `W` sized top element of the stack, and jump to the `W` sized
        address supplied by the immediate argument if the popped value is 0.
    - JMPNZ_ADDR, <ADDRESS>
        Pop the `W` sized top element of the stack, and jump to the `W` sized
        address supplied by the immediate argument if the top element is NOT 0.
    - JUMP
        Pop a `W` sized address from the stack and jump to it.
    - JMPZ
        Pop a `W` sized address and a `W` sized value from the stack. If the
        latter value is 0, jump to the obtained address. Otherwise, skip to
        the next instruction.
    - JMPNZ
        Pop a `W` sized address and a `W` sized value from the stack. If the
        latter value is NOT 0, jump to the obtained address. Otherwise, skip to
        the next instruction.


Function instructions:
    - CALL, <ADDRESS>
        Call a function, consume a number of `W` sized stack elements as the
        function arguments and push the result as a `W` sized integer to the
        stack. In truth, this instruction is comprised of multiple instructions.
        
        Firstly, the address provided by the immediate argument must lead to
        the function table element corresponding to the calling function.

        Assuming the prerequisite mentioned above is met, the following
        instructions are to be executed:

        1. Obtain the number of function argument `n` from the function table.
        2. Pop `n` number of `W` sized elements from the operand stack and push
           them to the call stack.
        3. Push the number of arguments `n` as a `W` sized integer to the
           call stack.
        4. Obtain the size of the local variable section of the call frame from
           the function table.
        5. Allocate a space for the local variable section by incrementing the
           frame pointer with the obtained value for the section's size.
        6. Push the instruction pointer to the call stack as a `W`
           sized integer. This serves as the return address.
        7. Obtain the address to the code of the function from the function
           table and use it as the value of the instruction pointer.

    - RETURN
        Return from the currently executing function and pop off the call frame
        from the call stack. Like the CALL instruction, this instruction is
        comprised of multiple instructions:

        1. Pop the return address from the call stack and set it as the value of
           the instruction pointer.
        2. Pop the size of the local variable section off the call stack and
           decrement the frame pointer with it, effectively popping off the
           local variable section.
        3. Pop the number of function arguments of the call stack and decrement
           the frame pointer with it, effectively popping off the function
           argument section.
        
        At this point, the call frame has been fully discarded from the call
        stack.


CPU state instructions:
    - ABORT
        Fatally stop the code execution. Usually executed under unexpected or
        abnormal circumstances (e.g. IP going out of bounds).
        The end state of the VM will always be FAILURE.
    - DONE
        Stop the code execution. Usually executed under normal circumstances.
        The end state of the VM is determined by a default value or by the code,
        usually by the `POP_RES` instruction.
        By default, the end state is SUCCESS which has the value of 0.


Miscellaneous:
    - NOP
        No operation. The execution proceeds to the next instruction.


--------------------------------------------------------------------------------
OBSOLETE INSTRUCTIONS:
----------------------
OUT_IP:
    Print the instruction pointer as a hexadecimal integer.
OUT_SP:
    Print the stack pointer as a hexadecimal integer.
OUT_ADDR, <ADDRESS>:
    Print the `W` sized value addressed by the immediate argument as a
    hexadecimal integer.
--------------------------------------------------------------------------------
NOTES: