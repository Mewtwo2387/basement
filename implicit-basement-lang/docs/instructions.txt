--------------------------------------------------------------------------------
Instruction Set of the Virtual Machine of `basement-lang` [DRAFT. REVISION 5.1]
--------------------------------------------------------------------------------

Immediate operands for instructions
    - <LITERAL>
        A constant value supplied by the user in the code.
    - <ADDRESS>
        Memory address.


Data stack manipulation instructions
    PUSH & POP instructions:
        - PUSHI, <LITERAL>
            Push the immediate argument to the stack.
        - LOADI, <ADDRESS>
            Push the value pointed by the immediate argument as the address to
            the stack.
        - STOREI, <ADDRESS>
            Pop TOS and store it to memory with the immediate argument as the
            address.
        - LOAD
            POP an address and push the value with the popped address to the
            stack.
        - STORE
            POP an address and a literal value. And use them to write to memory.
        - POP_RES
            Pop TOS and set it as the result of the program.
    Miscellaneous:
        - DISCARD
            Remove TOS.
        - DUP
            Duplicate the TOS value and push it to the stack.
        - SWAP_TOP
            Swap the two topmost values on the stack.
        - SWAP, <LITERAL>
            Swap the TOS value with the another stack element with the immediate
            argument as the offset from the TOS.


Subroutine instructions:
    - CALL, <ADDRESS>
        Push a "call frame" to the stack which includes: an empty slot for the
        return value, the arguments of the subroutine, the number of the
        arguments and the return address which at this point must still be the
        current address the instruction pointer points to.
        Then change the instruction pointer to the address supplied by the
        immediate argument.
        The frame pointer moves to the top of the stack.
    - RET
        Change the instruction pointer to the return address accessed through
        the frame pointer, swap the return value slot with the value on TOS,
        decrement the stack pointer as specified by the argument size.
        If everything went right with the CALL instruction, the distance from
        the the return address to the return value is `(N + 1) * W` bits where
        `N` is the number of arguments and `W` is the word size in bits.
        The stack pointer SHOULD then be pointing at the return value, the first
        element that is pushed when the CALL instruction was executed.
        The frame pointer then moves to the new top of the stack.


Arithmetic/Bitwise logical operation instructions
    Binary operations:
        Pop two values from the stack, perform the binary operation,
        and push the result to the stack.
        - ADD  (addition)
        - SUB  (subtraction)
        - MUL  (multiplication)
        - DIV  (integer division)
    In-place binary operations:
        - ADDI
            Pop TOS and add it to the next value on the stack.
        - ADDI_ADDR, <ADDRESS>
            Get the value from memory with the immediate argument as the address
            and add it to the TOS value.


Bitwise logical operation instructions
    Binary operations:
        (Same case as the arithmetic binary operations)
        - OR   (bitwise inclusive OR)
        - AND  (bitwise AND)
        - NOR  (bitwise not OR)
        - NAND (bitwise not AND)
        - XOR  (bitwise exclusive OR)
        - LSH  (bitwise left-shift)
        - RSH  (bitwise right-shift)
    Unary operations:
        Pop one value from the stack and do the unary operation on it.
        The result is to be pushed to the stack.
        - NOT  (bitwise NOT)


Comparison operation instructions:
    Binary operations:
        (Same case as the arithmetic/bitwise logical binary operations)
        If the result is true, the pushed value is 1, and if it is false,
        the pushed value is 0.
        - EQUAL
        - LESS
        - LESS_OR_EQUAL
        - GREATER
        - GREATER_OR_EQUAL


Input/Output instructions:
    IN:
        Get a value from the stdin and push it to the stack.
    OUT:
        Pop a value from the stack and print it to stdout as an ASCII character.
    OUT_NUM:
        Pop a value from the stack and print it to stdout as a decimal number.
    OUT_IP:
        Print the current instruction pointer.
    OUT_ADDR, <ADDRESS>:
        Print the value address by the immediate argument.


Jump instructions:
    - JUMP, <ADDRESS>
        Unconditional jump to the address provided as an argument.
    - JUMP_IF_FALSE
        Jump to the address from the instruction if TOS is false (i.e. 0)
    - JUMP_IF_TRUE
        Jump to the address from the instruction if TOS is true (i.e. not 0)


CPU state instructions:
    - ABORT
        Stop the code execution, and set the VM result as "FAILED"
    - DONE
        Stop the code execution, and set the VM result as "SUCCESS"


--------------------------------------------------------------------------------
NOTES:
    1.) There SHOULD be a value on top of the return address as the result
        for the computations done within the subroutine. Subroutines with no
        instructions, no computations, done whatsoever would then somehow pull
        value from the portion of the call frame itself or even beyond JUST to
        satisfy having a return value.
        THIS IS NOT IDEAL. In further discussions, we try to address this edge
        case.
    2.) The I/O instructions are still subject to change.
        An idea is that the IN, OUT & OUT_X instructions are non-primitive
        instructions and are basically just LOAD and STORE instructions to and
        from the memory space allocated for I/O.
    3.) To simplify further the VM implementation, all data including the memory
        addresses will have the same size: 64 bits.
        That is to say, we abandon the original word size of 1 byte.
        However, the opcodes will still be 1 byte long.