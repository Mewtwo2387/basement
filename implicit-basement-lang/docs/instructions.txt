--------------------------------------------------------------------------------
Instruction Set of the Virtual Machine of `basement-lang` [DRAFT. REVISION 2]
--------------------------------------------------------------------------------

Instruction operands
    - <LITERAL>
        A constant value supplied by the user in the code.
        By convention, this is 64 bits or 8 words in size.
        [NOTE: A single word amounts to 8 bits or 1 byte.]
    - <ADDRESS>
        Memory address. By convention, this is 16 bits or 2 words in size.


Data stack manipulation instructions
    PUSH_X instructions:
        - PUSH_LIT, <LITERAL>
            Push a literal argument to the data stack.
        - PUSH_ADDR, <ADDRESS>
            Push the value pointed by the address argument to the data stack.
    POP_X instructions:
        - POP
            Discard the TOS (top of the data stack) value.
        - POP_ADDR, <LITERAL>
            Pop TOS & use it as the address to write the literal argument
            to memory.
        - POP_LIT, <ADDRESS>
            Pop TOS & write it to memory as specified by the address argument.
        - POP_ADDRLIT
            Pop an address and a literal, and write the literal to memory.
        - POP_RES
            Pop TOS and set it as the result of the program.
    Miscellaneous:
        - DUP
            Duplicate the TOS value and push it to the data stack.
        - SWAP
            Swap the two topmost values on the data stack.


Subroutine instructions:
    - CALL, <ADDRESS>
        Jump to the subroutine as specified by the address in the instruction.
        Push a call frame to the data stack which includes the return address
        and a precomputed space for local variables.
    - RET, <ADDRESS>
    - RET, <LITERAL>
        Pop the call frame on top of the data stack and set the instruction
        pointer to the return address. The return value (which can be either the
        value of a local variable as specified by an address argument, or
        a literal argument) is to be pushed to the data stack.


Arithmetic/Bitwise logical operation instructions
    Binary operations:
        Pop two values from the data stack, perform the binary operation,
        and push the result to the data stack.
        - ADD  (addition)
        - SUB  (subtraction)
        - MUL  (multiplication)
        - DIV  (integer division)
    In-place binary operations:
        - ADDI
            Pop TOS and add it to the next value on the stack.
        - ADDI_ADDR, <ADDRESS>
            Get the value from the address argument and add it to the TOS value.


Bitwise logical operation instructions
    Binary operations:
        (Same case as the arithmetic binary operations)
        - OR   (bitwise inclusive OR)
        - AND  (bitwise AND)
        - NOR  (bitwise not OR)
        - NAND (bitwise not AND)
        - XOR  (bitwise exclusive OR)
        - LSH  (bitwise left-shift)
        - RSH  (bitwise right-shift)
    Unary operations:
        Pop one value from the stack and do the unary operation on it.
        The result is to be pushed to the stack.
        - NOT  (bitwise NOT)


Comparison operation instructions:
    Binary operations:
        (Same case as the arithmetic/bitwise logical binary operations)
        If the result is true, the pushed value is 1, and if it is false,
        the pushed value is 0.
        - EQUAL
        - LESS
        - LESS_OR_EQUAL
        - GREATER
        - GREATER_OR_EQUAL


Jump instructions:
    - JUMP, <ADDRESS>
        Unconditional jump to the address provided as an argument.
    - JUMP_IF_FALSE
        Jump to the address from the instruction if TOS is false (i.e. 0)
    - JUMP_IF_TRUE
        Jump to the address from the instruction if TOS is true (i.e. not 0)


CPU state instructions:
    - ABORT
        Stop the code execution, and set the VM result as "FAILED"
    - DONE
        Stop the code execution, and set the VM result as "SUCCESS"


Debugging instructions
    - PRINT <ADDRESS>
        Print the value of the address argument.


--------------------------------------------------------------------------------
NOTES:
    1.) The debugging instructions are subject to change. They may be removed in
        the future revisions.
    2.) I am considering adding I/O instructions, though this must require the
        CPU to know the memory space for the I/O beforehand.